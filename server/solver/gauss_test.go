package solver

import (
	"reflect"
	"testing"
)

func TestGaussianElimination(t *testing.T) {
	testCases := []struct {
		name             string
		matrix           [MatrixSize]uint32
		expectedSolvable bool
		expectedFinalRow uint8
		expectedMatrix   [MatrixSize]uint32
	}{
		{
			name: "Empty matrix",
			matrix: [MatrixSize]uint32{
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
			},
			expectedSolvable: true,
			expectedFinalRow: 0,
			expectedMatrix: [MatrixSize]uint32{
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
			},
		},
		{
			name: "Unsolvable matrix",
			matrix: [MatrixSize]uint32{
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b11_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
				0b01_0010_0000_1000_0000_0101_0100,
			},
			expectedSolvable: false,
			expectedFinalRow: 0,
			expectedMatrix: [MatrixSize]uint32{
				0b01_0010_0000_1000_0000_0101_0100,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b10_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
			},
		},
		{
			name: "Scrambled identity matrix",
			matrix: [MatrixSize]uint32{
				0b00_0000_0000_0000_0000_0000_0010,
				0b00_0000_0000_0100_0000_0000_0000,
				0b10_0000_0000_0000_0000_1000_0000,
				0b10_0000_0000_0000_0000_0100_0000,
				0b00_0100_0000_0000_0000_0000_0000,
				0b10_0000_0010_0000_0000_0000_0000,
				0b00_0000_1000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0100,
				0b10_0000_0000_0000_0010_0000_0000,
				0b01_0000_0000_0000_0000_0000_0000,
				0b10_0000_0000_0000_0001_0000_0000,
				0b10_1000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_1000_0000_0000,
				0b00_0000_0000_0000_0000_0000_1000,
				0b10_0000_0000_0010_0000_0000_0000,
				0b00_0000_0000_0001_0000_0000_0000,
				0b00_0000_0000_1000_0000_0000_0000,
				0b10_0000_0000_0000_0000_0001_0000,
				0b00_0000_0000_0000_0000_0010_0000,
				0b00_0000_0000_0000_0000_0000_0001,
				0b10_0010_0000_0000_0000_0000_0000,
				0b10_0000_0000_0000_0100_0000_0000,
				0b00_0001_0000_0000_0000_0000_0000,
				0b00_0000_0100_0000_0000_0000_0000,
				0b10_0000_0001_0000_0000_0000_0000,
			},
			expectedSolvable: true,
			expectedFinalRow: MatrixSize,
			expectedMatrix: [MatrixSize]uint32{
				0b00_0000_0000_0000_0000_0000_0001,
				0b00_0000_0000_0000_0000_0000_0010,
				0b00_0000_0000_0000_0000_0000_0100,
				0b00_0000_0000_0000_0000_0000_1000,
				0b10_0000_0000_0000_0000_0001_0000,
				0b00_0000_0000_0000_0000_0010_0000,
				0b10_0000_0000_0000_0000_0100_0000,
				0b10_0000_0000_0000_0000_1000_0000,
				0b10_0000_0000_0000_0001_0000_0000,
				0b10_0000_0000_0000_0010_0000_0000,
				0b10_0000_0000_0000_0100_0000_0000,
				0b00_0000_0000_0000_1000_0000_0000,
				0b00_0000_0000_0001_0000_0000_0000,
				0b10_0000_0000_0010_0000_0000_0000,
				0b00_0000_0000_0100_0000_0000_0000,
				0b00_0000_0000_1000_0000_0000_0000,
				0b10_0000_0001_0000_0000_0000_0000,
				0b10_0000_0010_0000_0000_0000_0000,
				0b00_0000_0100_0000_0000_0000_0000,
				0b00_0000_1000_0000_0000_0000_0000,
				0b00_0001_0000_0000_0000_0000_0000,
				0b10_0010_0000_0000_0000_0000_0000,
				0b00_0100_0000_0000_0000_0000_0000,
				0b10_1000_0000_0000_0000_0000_0000,
				0b01_0000_0000_0000_0000_0000_0000,
			},
		},
		{
			name: "Random solvable matrix",
			matrix: [MatrixSize]uint32{
				0b00_0100_0000_1000_0101_1000_0000,
				0b00_0100_0000_1000_0101_1000_0000,
				0b00_0000_0000_0000_0100_0100_0010,
				0b10_1000_1000_0010_0000_0000_0000,
				0b10_1000_1000_0010_0000_0000_0000,
				0b10_0000_1000_0000_0100_0000_0001,
				0b00_0000_1111_0100_0000_0000_0000,
				0b00_0000_0000_0000_0100_0100_0010,
				0b00_1000_0101_0000_0000_0000_0000,
				0b00_1000_0101_0000_0000_0000_0000,
				0b00_1000_0101_0000_0000_0000_0000,
				0b00_1000_0101_0000_0000_0000_0000,
				0b10_0000_1000_0000_0100_0000_0001,
				0b10_0000_0100_0000_0010_0001_0000,
				0b10_0000_0100_0000_0010_0001_0000,
				0b10_0000_0100_0000_0010_0001_0000,
				0b10_0000_0100_0000_0010_0001_0000,
				0b10_0000_1000_0000_0100_0000_0001,
				0b10_0010_0000_0000_0010_0000_0000,
				0b10_0010_0000_0000_0010_0000_0000,
				0b10_0010_0000_0000_0010_0000_0000,
				0b00_0001_0000_0000_0000_0000_0000,
				0b10_0010_0000_0000_0000_0000_0000,
				0b00_0100_0000_0000_0000_0000_0000,
				0b10_1000_0000_0000_0000_0000_0000,
			},
			expectedSolvable: true,
			expectedFinalRow: 12,
			expectedMatrix: [MatrixSize]uint32{
				0b10_0000_1000_0000_0100_0000_0001,
				0b00_0000_0000_0000_0100_0100_0010,
				0b10_0000_0100_0000_0000_0001_0000,
				0b00_0000_0000_1000_0101_1000_0000,
				0b00_0000_0000_0000_0010_0000_0000,
				0b00_0000_1000_0010_0000_0000_0000,
				0b10_0000_1010_0100_0000_0000_0000,
				0b10_0000_0101_0000_0000_0000_0000,
				0b00_0001_0000_0000_0000_0000_0000,
				0b10_0010_0000_0000_0000_0000_0000,
				0b00_0100_0000_0000_0000_0000_0000,
				0b10_1000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
				0b00_0000_0000_0000_0000_0000_0000,
			},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			// Act
			gauss := NewGaussianEliminator()
			solvable, finalRow := gauss.gaussianEliminate(&testCase.matrix)

			// Assert
			if solvable != testCase.expectedSolvable {
				t.Errorf("Incorrect result for solvable: expected %v, got %v", testCase.expectedSolvable, solvable)
			}

			if finalRow != testCase.expectedFinalRow {
				t.Errorf("Incorrect result for finalRow: expected %v, got %v", testCase.expectedFinalRow, finalRow)
			}

			if !reflect.DeepEqual(testCase.expectedMatrix, testCase.matrix) {
				t.Error("Incorrect result for the matrix")
			}
		})
	}
}
